# set header_x_real_ip to remote_addr or http_cf_connecting_ip if present
map $http_cf_connecting_ip $header_x_real_ip {
  default $http_cf_connecting_ip;
  "" $remote_addr;
}

geoip2 /usr/share/geoip/GEOIP_EDITIONID.mmdb {
  $geoip2_data_country_code                 source=$header_x_real_ip  country iso_code;
  $geoip2_data_country_name                 source=$header_x_real_ip  country names en;
  $geoip2_data_city_name                    source=$header_x_real_ip  city names en;
  $geoip2_data_continent_name               source=$header_x_real_ip  continent names en;
  $geoip2_data_subdivision_code             source=$header_x_real_ip  subdivisions 0 iso_code;
  $geoip2_data_subdivision_name             source=$header_x_real_ip  subdivisions 0 names en;

  $geoip2_data_country_code_by_uri          source=$ip_uri  country iso_code;
  $geoip2_data_country_name_by_uri          source=$ip_uri  country names en;
  $geoip2_data_city_name_by_uri             source=$ip_uri  city names en;
  $geoip2_data_continent_name_by_uri        source=$ip_uri  continent names en;
  $geoip2_data_subdivision_code_by_uri      source=$ip_uri  subdivisions 0 iso_code;
  $geoip2_data_subdivision_name_by_uri      source=$ip_uri  subdivisions 0 names en;

}

server_tokens off;

add_header Host                   $host;
add_header X-Real-IP              $header_x_real_ip;
add_header X-Forwarded-For        $http_x_forwarded_for;
add_header X-Geo-Country-Code     $geoip2_data_country_code;
add_header X-Geo-Country-Name     $geoip2_data_country_name;

log_format  geoip_plain_txt escape=none '$remote_addr - $remote_user [$time_local] "$request" '
                              '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
                              '"$http_x_forwarded_for" "$http_x_real_ip" "$http_x_custom_real_ip" "$http_x_header_real_ip" "$http_cf_connecting_ip" '
                              '"$geoip2_data_country_code" "$geoip2_data_country_name" "$geoip2_data_country_code_by_uri" "$geoip2_data_country_name_by_uri"';

log_format geoip_extended_json escape=json '{ "remote_ip": "$remote_addr", '
                                  '"remote_user": "$remote_user", '
                                  '"time": "$time_local", '
                                  '"host": "$host", '
                                  '"request": "$request", '
                                  '"status": "$status", '
                                  '"body_bytes_sent": "$body_bytes_sent", '
                                  '"http_referer": "$http_referer", '
                                  '"agent": "$http_user_agent", '
                                  '"request_time": "$request_time", '
                                  '"x_forwarded_for": "$http_x_forwarded_for", '
                                  '"x_real_ip": "$http_x_real_ip", '
                                  '"x_custom_real_ip": "$http_x_custom_real_ip", '
                                  '"x_header_real_ip": "$http_x_header_real_ip", '
                                  '"cf_connecting_ip": "$http_cf_connecting_ip", '
                                  '"geoip2_data_country_code": "$geoip2_data_country_code", '
                                  '"geoip2_data_country_name": "$geoip2_data_country_name", '
                                  '"geoip2_data_city_name": "$geoip2_data_city_name", '
                                  '"geoip2_data_continent_name": "$geoip2_data_continent_name", '
                                  '"geoip2_data_subdivision_code": "$geoip2_data_subdivision_code", '
                                  '"geoip2_data_subdivision_name": "$geoip2_data_subdivision_name", '
                                  '"geoip2_data_country_code_by_uri": "$geoip2_data_country_code_by_uri", '
                                  '"geoip2_data_country_name_by_uri": "$geoip2_data_country_name_by_uri", '
                                  '"geoip2_data_city_name_by_uri": "$geoip2_data_city_name_by_uri", '
                                  '"geoip2_data_continent_name_by_uri": "$geoip2_data_continent_name_by_uri", '
                                  '"geoip2_data_subdivision_code_by_uri": "$geoip2_data_subdivision_code_by_uri", '
                                  '"geoip2_data_subdivision_name_by_uri": "$geoip2_data_subdivision_name_by_uri"  }';


access_log  /usr/local/openresty/nginx/logs/access.log  geoip_extended_json;
error_log /usr/local/openresty/nginx/logs/error.log;

server {
  listen       80;
  server_name  localhost;
  resolver 127.0.0.11 ipv6=off;

  location / {

    # set header_x_real_ip to http_x_real_ip if present
    if ($http_x_real_ip) {
      set $header_x_real_ip $http_x_real_ip;
    }

    # set header_x_real_ip to http_x_custom_real_ip if present
    if ($http_x_custom_real_ip) {
      set $header_x_real_ip $http_x_custom_real_ip;
    }

    # set header_x_real_ip to http_x_header_real_ip if present
    if ($http_x_header_real_ip) {
      set $header_x_real_ip $http_x_header_real_ip;
    }

    default_type "application/json";
    content_by_lua_block {
      if ngx.var.geoip2_data_country_code and ngx.var.geoip2_data_country_name then
        ngx.say("{\"IP\":\"" .. ngx.var.header_x_real_ip .. "\",\"iso2Code\":\"" .. ngx.var.geoip2_data_country_code .. "\",\"name\":\"" .. ngx.var.geoip2_data_country_name .. "\"}")
      else
        ngx.say("{\"status\":\"header_error\"}")
      end
    }

  }

  location /favicon.ico {
    root /usr/local/openresty/nginx/html;
    try_files $uri =404;
  }

  location /health {
    add_header Content-Type text/plain;
    return 200 "OK";
  }

  location /ip/ {

    default_type "application/json";
    set $ip_uri '';
    content_by_lua_block {
      ngx.var.ip_uri = ngx.re.sub(ngx.var.uri, "/ip/", "")
      if ngx.var.geoip2_data_country_code_by_uri and ngx.var.geoip2_data_country_name_by_uri then
        ngx.say("{\"IP\":\"" .. ngx.var.ip_uri  ..  "\",\"iso2Code\":\"" .. ngx.var.geoip2_data_country_code_by_uri .. "\",\"name\":\"" .. ngx.var.geoip2_data_country_name_by_uri .. "\"}")
      else
        ngx.say("{\"status\":\"ip_error\"}")
      end
    }

  }

  # NOTE: for GeoIP2-City DB
  location /ip/city/ {

    default_type "application/json";
    set $ip_uri '';
    content_by_lua_block {
      ngx.var.ip_uri = ngx.re.sub(ngx.var.uri, "/ip/city/", "")
      if ngx.var.geoip2_data_country_code_by_uri and ngx.var.geoip2_data_country_name_by_uri and  ngx.var.geoip2_data_city_name_by_uri and  ngx.var.geoip2_data_continent_name_by_uri and  ngx.var.geoip2_data_subdivision_code_by_uri and  ngx.var.geoip2_data_subdivision_name_by_uri then
        ngx.say("{\"IP\":\"" .. ngx.var.ip_uri  ..  "\",\"country_iso_code\":\"" .. ngx.var.geoip2_data_country_code_by_uri .. "\",\"country_name\":\"" .. ngx.var.geoip2_data_country_name_by_uri .. "\",\"city_name\":\"" .. ngx.var.geoip2_data_city_name_by_uri .. "\",\"continent_name\":\"" .. ngx.var.geoip2_data_continent_name_by_uri .. "\",\"subdivisions1_iso_code\":\"" .. ngx.var.geoip2_data_subdivision_code_by_uri .. "\",\"subdivision_name\":\"" .. ngx.var.geoip2_data_subdivision_name_by_uri .. "\"}")
      else
        ngx.say("{\"status\":\"ip_error\"}")
      end
    }

  }

}
